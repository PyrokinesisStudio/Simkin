EXPORTS
	to__C8skString @ 1 NONAME R3UNUSED ; skString::to(void) const
	__as__8skStringPCUw @ 2 NONAME R3UNUSED ; skString::operator=(unsigned wchar_t const *)
	__as__8skStringUw @ 3 NONAME R3UNUSED ; skString::operator=(unsigned wchar_t)
	__ne__C8skStringPCUw @ 4 NONAME R3UNUSED ; skString::operator!=(unsigned wchar_t const *) const
	__ne__C8skStringRC8skString @ 5 NONAME R3UNUSED ; skString::operator!=(skString const &) const
	__pl__C8skStringRC8skString @ 6 NONAME R3UNUSED ; skString::operator+(skString const &) const
	__pl__FPCUwRC8skString @ 7 NONAME R3UNUSED ; operator+(unsigned wchar_t const *, skString const &)
	__pl__FRC7TDesC16RC8skString @ 8 NONAME R3UNUSED ; operator+(TDesC16 const &, skString const &)
	addStrings__8skStringRC7TDesC16N21 @ 9 NONAME ; skString::addStrings(TDesC16 const &, TDesC16 const &, TDesC16 const &)
	addStrings__8skStringRC7TDesC16N31 @ 10 NONAME ; skString::addStrings(TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &)
	addStrings__8skStringRC7TDesC16N41 @ 11 NONAME ; skString::addStrings(TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &)
	addStrings__8skStringRC7TDesC16N51 @ 12 NONAME ; skString::addStrings(TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &)
	addStrings__8skStringRC7TDesC16N61 @ 13 NONAME ; skString::addStrings(TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &)
	addStrings__8skStringRC7TDesC16N71 @ 14 NONAME ; skString::addStrings(TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &, TDesC16 const &)
	addStrings__8skStringRC7TDesC16T1 @ 15 NONAME R3UNUSED ; skString::addStrings(TDesC16 const &, TDesC16 const &)
	addStrings__8skStringRC8skStringN21 @ 16 NONAME ; skString::addStrings(skString const &, skString const &, skString const &)
	addStrings__8skStringRC8skStringN31 @ 17 NONAME ; skString::addStrings(skString const &, skString const &, skString const &, skString const &)
	addStrings__8skStringRC8skStringN41 @ 18 NONAME ; skString::addStrings(skString const &, skString const &, skString const &, skString const &, skString const &)
	addStrings__8skStringRC8skStringN51 @ 19 NONAME ; skString::addStrings(skString const &, skString const &, skString const &, skString const &, skString const &, skString const &)
	addStrings__8skStringRC8skStringN61 @ 20 NONAME ; skString::addStrings(skString const &, skString const &, skString const &, skString const &, skString const &, skString const &, skString const &)
	addStrings__8skStringRC8skStringN71 @ 21 NONAME ; skString::addStrings(skString const &, skString const &, skString const &, skString const &, skString const &, skString const &, skString const &, skString const &)
	addStrings__8skStringRC8skStringT1 @ 22 NONAME R3UNUSED ; skString::addStrings(skString const &, skString const &)
	equalsIgnoreCase__C8skStringRC8skString @ 23 NONAME R3UNUSED ; skString::equalsIgnoreCase(skString const &) const
	fromBuffer__8skStringPUw @ 24 NONAME R3UNUSED ; skString::fromBuffer(unsigned wchar_t *)
	from__8skStringUi @ 25 NONAME R3UNUSED ; skString::from(unsigned int)
	from__8skStringUw @ 26 NONAME R3UNUSED ; skString::from(unsigned wchar_t)
	from__8skStringf @ 27 NONAME ; skString::from(float)
	from__8skStringi @ 28 NONAME R3UNUSED ; skString::from(int)
	indexOfLast__C8skStringUw @ 29 NONAME R3UNUSED ; skString::indexOfLast(unsigned wchar_t) const
	indexOf__C8skStringRC8skString @ 30 NONAME R3UNUSED ; skString::indexOf(skString const &) const
	indexOf__C8skStringUw @ 31 NONAME R3UNUSED ; skString::indexOf(unsigned wchar_t) const
	literal__8skStringPCUw @ 32 NONAME R3UNUSED ; skString::literal(unsigned wchar_t const *)
	ltrim__C8skString @ 33 NONAME R3UNUSED ; skString::ltrim(void) const
	removeInitialBlankLines__C8skString @ 34 NONAME R3UNUSED ; skString::removeInitialBlankLines(void) const
	replace__C8skStringPCUwT1 @ 35 NONAME ; skString::replace(unsigned wchar_t const *, unsigned wchar_t const *) const
	replace__C8skStringRC7TDesC16T1 @ 36 NONAME ; skString::replace(TDesC16 const &, TDesC16 const &) const
	replace__C8skStringRC8skStringT1 @ 37 NONAME ; skString::replace(skString const &, skString const &) const
	substr__C8skStringUi @ 38 NONAME R3UNUSED ; skString::substr(unsigned int) const
	substr__C8skStringUiUi @ 39 NONAME ; skString::substr(unsigned int, unsigned int) const
	toFloat__C8skString @ 40 NONAME R3UNUSED ; skString::toFloat(void) const
	__apl__8skStringRC8skString @ 41 NONAME R3UNUSED ; skString::operator+=(skString const &)

